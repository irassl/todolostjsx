{"version":3,"sources":["component/AddItemForm.tsx","component/EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addTask","trim","callback","value","onChange","e","currentTarget","onKeyPress","charCode","className","onClick","EditableSpan","edit","setEdit","oldTitle","newtitle","setNewTitle","autoFocus","onBlur","onDoubleClick","Todolist","id","tasks","map","t","key","isDone","type","changeTaskStatus","checked","tId","console","log","updateTask","updateTaskHandler","removeTask","filter","changeFilter","App","todolistID1","v1","todolistID2","todolists","setTodolists","setTasks","todolistId","taskId","updateTitle","task","changeStatus","el","newId","tl","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6a4cfbeb.chunk.js","sourcesContent":["import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\n\nexport type TaskType = {\n\tid: string\n\ttitle: string\n\tisDone: boolean\n}\n\ntype PropsType = {\n\t//\tid: string\n\t//\ttitle: string\n\t//\ttodolistId: string\n\t//removeTask: (todolistId: string, id: string) => void\n\t//\tchangeFilter: (todolistId: string, value: FilterValuesType) => void\n\tcallback: (title: string) => void\n\t//\tchangeTaskStatus: (todolistId: string, taskId: string, isDone: boolean) => void\n}\n\nexport function AddItemForm(props: PropsType) {\n\n\tlet [title, setTitle] = useState(\"\")\n\tlet [error, setError] = useState<string | null>(null)\n\n\tconst addTask = () => {\n\t\tif (title.trim() !== \"\") {\n\t\t\tprops.callback(title.trim());\n\t\t\tsetTitle(\"\");\n\t\t} else {\n\t\t\tsetError(\"Title is required\");\n\t\t}\n\t}\n\n\tconst onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tsetTitle(e.currentTarget.value)\n\t}\n\n\tconst onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n\t\tsetError(null);\n\t\tif (e.charCode === 13) {\n\t\t\taddTask();\n\t\t}\n\t}\n\n\treturn <div>\n\n\t\t<div>\n\t\t\t<input value={title}\n\t\t\t\tonChange={onChangeHandler}\n\t\t\t\tonKeyPress={onKeyPressHandler}\n\t\t\t\tclassName={error ? \"error\" : \"\"}\n\t\t\t/>\n\t\t\t<button onClick={addTask}>+</button>\n\t\t\t{error && <div className=\"error-message\">{error}</div>}\n\t\t</div>\n\n\t</div>\n}\n","import React, { ChangeEvent, useState } from 'react';\n\ntype propsType = {\n\toldTitle: string\n\tcallback: (title: string) => void\n}\n\nexport const EditableSpan = (props: propsType) => {\n\n\tlet [edit, setEdit] = useState(false)\n\tlet [newtitle, setNewTitle] = useState(props.oldTitle)\n\n\n\tconst onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tsetNewTitle(e.currentTarget.value)\n\t}\n\tconst onDoubleClickHandler = () => {\n\t\tsetEdit(true)\n\t}\n\tconst onBlurHandler = () => {\n\t\tprops.callback(newtitle)\n\t\tsetEdit(false)\n\t}\n\treturn (\n\t\tedit\n\t\t\t? <input value={newtitle} onChange={onChangeHandler} autoFocus onBlur={onBlurHandler} />\n\t\t\t: <span onDoubleClick={onDoubleClickHandler}  >{props.oldTitle}</span>\n\t)\n}","import React, { ChangeEvent } from 'react';\nimport { FilterValuesType } from './App';\nimport { AddItemForm } from './component/AddItemForm';\nimport { EditableSpan } from './component/EditableSpan';\n\n\nexport type TaskType = {\n\tid: string\n\ttitle: string\n\tisDone: boolean\n}\n\ntype PropsType = {\n\tid: string\n\ttitle: string\n\ttasks: Array<TaskType>\n\tremoveTask: (todolistId: string, id: string) => void\n\tchangeFilter: (todolistId: string, value: FilterValuesType) => void\n\taddTask: (todolistId: string, title: string) => void\n\tchangeTaskStatus: (todolistId: string, taskId: string, isDone: boolean) => void\n\tfilter: FilterValuesType\n\tupdateTask: (todolistId: string, taskid: string, updateTitle: string) => void\n}\n\nexport function Todolist(props: PropsType) {\n\n\t/*  let [title, setTitle] = useState(\"\")\n\t let [error, setError] = useState<string | null>(null)\n \n\t const addTask = () => {\n\t\t if (title.trim() !== \"\") {\n\t\t\t props.addTask(props.id, title.trim());\n\t\t\t setTitle(\"\");\n\t\t } else {\n\t\t\t setError(\"Title is required\");\n\t\t }\n\t }\n \n\t const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n\t\t setTitle(e.currentTarget.value)\n\t }\n \n\t const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n\t\t setError(null);\n\t\t if (e.charCode === 13) {\n\t\t\t addTask();\n\t\t }\n\t } */\n\n\n\tconst onAllClickHandler = () => props.changeFilter(props.id, \"all\");\n\tconst onActiveClickHandler = () => props.changeFilter(props.id, \"active\");\n\tconst onCompletedClickHandler = () => props.changeFilter(props.id, \"completed\");\n\tconst addTaskHandler = (title: string) => {\n\n\t\tprops.addTask(props.id, title);\n\n\t}\n\tconst updateTaskHandler = (tId: string, title: string) => {\n\t\tconsole.log(title)\n\t\tprops.updateTask(props.id, tId, title)\n\t}\n\n\treturn <div>\n\t\t{/*         <h3>{props.title}</h3>\n        <div>\n            <input value={title}\n                onChange={onChangeHandler}\n                onKeyPress={onKeyPressHandler}\n                className={error ? \"error\" : \"\"}\n            />\n            <button onClick={addTask}>+</button>\n            {error && <div className=\"error-message\">{error}</div>}\n        </div> */}\n\t\t<h3>{props.title}</h3>\n\t\t<AddItemForm callback={addTaskHandler} />\n\t\t<ul>\n\t\t\t{\n\t\t\t\tprops.tasks.map(t => {\n\t\t\t\t\tconst onClickHandler = () => props.removeTask(props.id, t.id)\n\t\t\t\t\tconst onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n\t\t\t\t\t\tprops.changeTaskStatus(props.id, t.id, e.currentTarget.checked);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\n\t\t\t\t\t\t<input type=\"checkbox\"\n\t\t\t\t\t\t\tonChange={onChangeHandler}\n\t\t\t\t\t\t\tchecked={t.isDone} />\n\t\t\t\t\t\t<EditableSpan oldTitle={t.title} callback={(title: string) => updateTaskHandler(title, t.id)} />\n\t\t\t\t\t\t{/*                         <span>{t.title}</span>\n */}                        <button onClick={onClickHandler}>x</button>\n\t\t\t\t\t</li>\n\t\t\t\t})\n\t\t\t}\n\t\t</ul>\n\t\t<div>\n\t\t\t<button className={props.filter === 'all' ? \"active-filter\" : \"\"}\n\t\t\t\tonClick={onAllClickHandler}>All</button>\n\t\t\t<button className={props.filter === 'active' ? \"active-filter\" : \"\"}\n\t\t\t\tonClick={onActiveClickHandler}>Active</button>\n\t\t\t<button className={props.filter === 'completed' ? \"active-filter\" : \"\"}\n\t\t\t\tonClick={onCompletedClickHandler}>Completed</button>\n\t\t</div>\n\t</div>\n}\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { Todolist } from './Todolist';\r\nimport { v1 } from 'uuid';\r\nimport { AddItemForm } from './component/AddItemForm';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodoListType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction App() {\r\n    let todolistID1 = v1();\r\n    let todolistID2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodoListType>>([\r\n        { id: todolistID1, title: 'What to learn', filter: 'all' },\r\n        { id: todolistID2, title: 'What to buy', filter: 'all' },\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState({\r\n        [todolistID1]: [\r\n            { id: v1(), title: \"HTML&CSS\", isDone: true },\r\n            { id: v1(), title: \"JS\", isDone: true },\r\n            { id: v1(), title: \"ReactJS\", isDone: false },\r\n            { id: v1(), title: \"Rest API\", isDone: false },\r\n            { id: v1(), title: \"GraphQL\", isDone: false },\r\n        ],\r\n        [todolistID2]: [\r\n            { id: v1(), title: \"HTML\", isDone: true },\r\n            { id: v1(), title: \"JS2\", isDone: true },\r\n            { id: v1(), title: \"ReactJS2\", isDone: false },\r\n            { id: v1(), title: \"Rest API2\", isDone: false },\r\n            { id: v1(), title: \"GraphQL2\", isDone: false },\r\n        ]\r\n    });\r\n\r\n    //   let [filter, setFilter] = useState<FilterValuesType>(\"all\");\r\n\r\n    const updateTask = (todolistId: string, taskId: string, updateTitle: string) => {\r\n        //setTasks({...tasks, [todolistId]: [...]})\r\n\r\n        console.log(todolistId, taskId, updateTitle)\r\n\r\n    }\r\n    function removeTask(todolistId: string, id: string) {\r\n        setTasks({ ...tasks, [todolistId]: tasks[todolistId].filter(t => t.id !== id) })\r\n        //    let filteredTasks = tasks.filter(t => t.id != id);\r\n        //     setTasks(filteredTasks);\r\n    }\r\n\r\n    function addTask(todolistId: string, title: string) {\r\n        let task = { id: v1(), title: title, isDone: false };\r\n        ////     let newTasks = [task, ...tasks];\r\n        //      setTasks(newTasks);\r\n        setTasks({ ...tasks, [todolistId]: [task, ...tasks[todolistId]] })\r\n    }\r\n\r\n    function changeStatus(todolistId: string, taskId: string, isDone: boolean) {\r\n        //      let task = tasks.find(t => t.id === taskId);\r\n        //       if (task) {\r\n        //          task.isDone = isDone;\r\n        //      }\r\n\r\n        //     setTasks([...tasks]);\r\n        setTasks({ ...tasks, [todolistId]: tasks[todolistId].map(t => t.id === taskId ? { ...t, isDone } : t) })\r\n\r\n    }\r\n\r\n\r\n    function changeFilter(todolistId: string, value: FilterValuesType) {\r\n        //    setFilter(value);\r\n        setTodolists(todolists.map(el => el.id === todolistId ? { ...el, filter: value } : el))\r\n    }\r\n    const addTodolist = (newtitle: string) => {\r\n        const newId = v1()\r\n        let newTodolist: TodoListType = { id: newId, title: newtitle, filter: 'all' }\r\n        setTodolists([newTodolist, ...todolists])\r\n        setTasks({ ...tasks, [newId]: [] })\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm callback={addTodolist} />\r\n\r\n            {todolists.map(tl => {\r\n\r\n                let tasksForTodolist = tasks[tl.id];\r\n\r\n\r\n                if (tl.filter === \"active\") {\r\n                    tasksForTodolist = tasks[tl.id].filter(t => t.isDone === false);\r\n                }\r\n                if (tl.filter === \"completed\") {\r\n                    tasksForTodolist = tasks[tl.id].filter(t => t.isDone === true);\r\n                }\r\n\r\n\r\n                return <Todolist key={tl.id}\r\n                    id={tl.id}\r\n                    title={tl.title}\r\n                    tasks={tasksForTodolist}\r\n                    removeTask={removeTask}\r\n                    changeFilter={changeFilter}\r\n                    addTask={addTask}\r\n                    changeTaskStatus={changeStatus}\r\n                    filter={tl.filter}\r\n                    updateTask={updateTask}\r\n                />\r\n            })\r\n\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}